@page "/"
@using C2.Components
@using C2.Models
@inject IRoR2ModService ModService

<PageTitle>RoR2 Troll Mod</PageTitle>

<div class="home-container">
    <h1>RoR2 Troll Mod Control Panel</h1>
    
    <div class="controls-section">
        <EnableToggle @bind-IsEnabled="isModEnabled" @bind-IsEnabled:after="HandleToggleChanged" />
        <PlayerSelection Players="@playerList" IsLoading="@isLoadingPlayers" OnSelectionChanged="@HandlePlayerSelectionChanged" />
        <ShrineControl CurrentMode="@currentShrineMode" IsLoading="@isShrineLoading" OnModeChanged="@HandleShrineModeChanged" @ref="shrineControlRef" />
    </div>

    <div class="item-cards-section">
        <h2>Item Cards</h2>
        <ItemCardsContainer Items="@items" IsLoading="@isLoading" />
    </div>
</div>

@code {
    private bool isModEnabled = false;
    private List<Player> playerList = new List<Player>();
    private List<Item> items = new List<Item>();
    private bool isLoading = true;
    private bool isLoadingPlayers = true;
    private ShrineMode currentShrineMode = ShrineMode.Off;
    private bool isShrineLoading = false;
    private ShrineControl? shrineControlRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        isLoadingPlayers = true;
        await Task.WhenAll(LoadPlayers(), LoadItems());
        isLoading = false;
        isLoadingPlayers = false;
        StateHasChanged();
    }

    private async Task LoadPlayers()
    {
        try
        {
            playerList = await ModService.GetAllPlayersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load players: {ex.Message}");
            playerList = new List<Player>();
        }
    }

    private async Task LoadItems()
    {
        try
        {
            items = await ModService.GetAllItemsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load items: {ex.Message}");
            items = new List<Item>();
        }
    }

    private async Task HandleToggleChanged()
    {
        try
        {
            ApiResponse result;
            if (isModEnabled)
            {
                Console.WriteLine("Enabling mod...");
                result = await ModService.EnableAsync();
            }
            else
            {
                Console.WriteLine("Disabling mod...");
                result = await ModService.DisableAsync();
            }

            if (!string.IsNullOrEmpty(result.Error))
            {
                Console.WriteLine($"Error toggling mod: {result.Error}");
            }
            else
            {
                Console.WriteLine($"Mod toggle result: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling toggle change: {ex.Message}");
        }
    }

    private async Task HandlePlayerSelectionChanged(List<string> selectedPlayerNames)
    {
        try
        {
            Console.WriteLine($"Player selection changed: {string.Join(", ", selectedPlayerNames)}");
            var result = await ModService.SetAffectedPlayersAsync(selectedPlayerNames);
            
            if (!string.IsNullOrEmpty(result.Error))
            {
                Console.WriteLine($"Error setting affected players: {result.Error}");
            }
            else
            {
                Console.WriteLine($"Successfully updated affected players: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling player selection change: {ex.Message}");
        }
    }

    private async Task HandleShrineModeChanged(ShrineMode newMode)
    {
        try
        {
            isShrineLoading = true;
            StateHasChanged();
            
            ApiResponse result;
            
            switch (newMode)
            {
                case ShrineMode.Off:
                    Console.WriteLine("Disabling shrine controller...");
                    result = await ModService.DisableShrineAsync();
                    break;
                    
                case ShrineMode.Guaranteed:
                    Console.WriteLine("Setting shrine to guaranteed...");
                    // First enable the shrine controller
                    var enableResult = await ModService.EnableShrineAsync();
                    if (!string.IsNullOrEmpty(enableResult.Error))
                    {
                        throw new Exception($"Failed to enable shrine: {enableResult.Error}");
                    }
                    // Then set it to guaranteed
                    result = await ModService.MakeShrineGuaranteedAsync();
                    break;
                    
                case ShrineMode.Impossible:
                    Console.WriteLine("Setting shrine to impossible...");
                    // First enable the shrine controller
                    var enableResult2 = await ModService.EnableShrineAsync();
                    if (!string.IsNullOrEmpty(enableResult2.Error))
                    {
                        throw new Exception($"Failed to enable shrine: {enableResult2.Error}");
                    }
                    // Then set it to impossible
                    result = await ModService.MakeShrineImpossibleAsync();
                    break;
                    
                default:
                    throw new ArgumentException($"Unknown shrine mode: {newMode}");
            }
            
            if (!string.IsNullOrEmpty(result.Error))
            {
                shrineControlRef?.SetMessage($"Error: {result.Error}", true);
                Console.WriteLine($"Error changing shrine mode: {result.Error}");
            }
            else
            {
                currentShrineMode = newMode;
                shrineControlRef?.SetMessage(result.Message ?? "Shrine mode updated successfully", false);
                Console.WriteLine($"Successfully changed shrine mode to {newMode}: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            shrineControlRef?.SetMessage($"Error: {ex.Message}", true);
            Console.WriteLine($"Error handling shrine mode change: {ex.Message}");
        }
        finally
        {
            isShrineLoading = false;
            StateHasChanged();
        }
    }
}
