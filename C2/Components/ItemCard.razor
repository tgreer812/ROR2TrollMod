<div class="item-card @GetRarityClass()" @onclick="HandleCardClick">
    <div class="item-header">
        <div class="item-icon">
            @if (!string.IsNullOrEmpty(Item.IconUrl))
            {
                <img src="@Item.IconUrl" alt="@Item.DisplayName" />
            }
            else
            {
                <div class="item-name-icon">@GetItemNameInitials()</div>
            }
        </div>
        <div class="item-info">
            <h3 class="item-name">@Item.DisplayName</h3>
            <span class="item-rarity">@Item.TierName</span>
        </div>
    </div>
    
    <div class="item-description">
        <p>@Item.Description</p>
    </div>
    
    <div class="item-actions">
        <div class="quantity-display">
            <span>Quantity: @Item.Quantity</span>
        </div>
        <div class="action-buttons">
            <button class="btn btn-give" @onclick="@(() => HandleAction("give"))">Give</button>
            <button class="btn btn-remove" @onclick="@(() => HandleAction("remove"))">Remove</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public Item Item { get; set; } = new();
    [Parameter] public EventCallback<(Item, string)> OnItemAction { get; set; }
    [Parameter] public EventCallback<Item> OnCardClick { get; set; }

    private async Task HandleAction(string action)
    {
        await OnItemAction.InvokeAsync((Item, action));
    }

    private async Task HandleCardClick()
    {
        await OnCardClick.InvokeAsync(Item);
    }

    private string GetItemNameInitials()
    {
        var nameToUse = !string.IsNullOrEmpty(Item.DisplayName) ? Item.DisplayName : Item.Name;
        if (string.IsNullOrEmpty(nameToUse))
            return "?";
        
        // Split by spaces and take first letter of each word, max 3 letters
        var words = nameToUse.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        var initials = string.Join("", words.Take(3).Select(w => w[0]));
        return initials.ToUpper();
    }

    private string GetRarityClass()
    {
        return Item.Tier.ToLower() switch
        {
            "tier1" => "rarity-common",
            "tier2" => "rarity-uncommon", 
            "tier3" => "rarity-legendary",
            "boss" => "rarity-boss",
            "lunar" => "rarity-lunar",
            "notier" => "rarity-common",
            _ => "rarity-common"
        };
    }
}
